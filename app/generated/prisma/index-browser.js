
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  emailVerified: 'emailVerified',
  passwordHash: 'passwordHash',
  accountStatus: 'accountStatus',
  createdAt: 'createdAt',
  lastLogin: 'lastLogin',
  userType: 'userType'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  avatarUrl: 'avatarUrl',
  birthDate: 'birthDate',
  gender: 'gender',
  identityDoc: 'identityDoc',
  cpf: 'cpf',
  occupation: 'occupation',
  maritalStatus: 'maritalStatus',
  hasChildren: 'hasChildren',
  ageGroup: 'ageGroup',
  stylePreference: 'stylePreference',
  referralSource: 'referralSource',
  privateNotes: 'privateNotes'
};

exports.Prisma.UserTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokenType: 'tokenType',
  token: 'token',
  tokenExpiry: 'tokenExpiry',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  slug: 'slug',
  title: 'title',
  status: 'status',
  projectType: 'projectType',
  developmentType: 'developmentType',
  investmentExpectation: 'investmentExpectation',
  area: 'area',
  initialBudget: 'initialBudget',
  expectedBudget: 'expectedBudget',
  actualBudget: 'actualBudget',
  createdAt: 'createdAt',
  startDate: 'startDate',
  expectedEndDate: 'expectedEndDate',
  endDate: 'endDate',
  coverUrl: 'coverUrl'
};

exports.Prisma.ProjectDetailScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  type: 'type',
  standard: 'standard',
  technicalManager: 'technicalManager',
  postalCode: 'postalCode',
  country: 'country',
  state: 'state',
  city: 'city',
  neighborhood: 'neighborhood',
  street: 'street',
  number: 'number',
  complement: 'complement'
};

exports.Prisma.ProjectPhaseScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  status: 'status',
  startDate: 'startDate',
  expectedEndDate: 'expectedEndDate',
  endDate: 'endDate',
  notes: 'notes',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectPhaseTaskScalarFieldEnum = {
  id: 'id',
  phaseId: 'phaseId',
  name: 'name',
  status: 'status',
  responsible: 'responsible',
  startDate: 'startDate',
  expectedEndDate: 'expectedEndDate',
  endDate: 'endDate',
  notes: 'notes',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConstructionPhaseScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  status: 'status',
  startDate: 'startDate',
  expectedEndDate: 'expectedEndDate',
  endDate: 'endDate',
  budget: 'budget',
  actualCost: 'actualCost',
  notes: 'notes',
  responsible: 'responsible',
  order: 'order'
};

exports.Prisma.ConstructionTaskScalarFieldEnum = {
  id: 'id',
  phaseId: 'phaseId',
  name: 'name',
  status: 'status',
  budget: 'budget',
  actualCost: 'actualCost',
  startDate: 'startDate',
  expectedEndDate: 'expectedEndDate',
  endDate: 'endDate',
  notes: 'notes',
  responsible: 'responsible',
  priority: 'priority'
};

exports.Prisma.ProjectDocumentScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  type: 'type',
  link: 'link',
  notes: 'notes',
  uploadedAt: 'uploadedAt',
  uploadedById: 'uploadedById',
  visibleToClient: 'visibleToClient',
  description: 'description'
};

exports.Prisma.BudgetScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  totalValue: 'totalValue',
  status: 'status',
  version: 'version',
  sentAt: 'sentAt',
  acceptedAt: 'acceptedAt',
  paymentTerms: 'paymentTerms',
  summary: 'summary',
  notes: 'notes',
  fileUrl: 'fileUrl',
  title: 'title'
};

exports.Prisma.ExecutionCostEstimateScalarFieldEnum = {
  id: 'id',
  item: 'item',
  cme: 'cme',
  r: 'r',
  re: 're',
  ur: 'ur',
  eur: 'eur',
  min: 'min'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  UserProfile: 'UserProfile',
  UserToken: 'UserToken',
  Project: 'Project',
  ProjectDetail: 'ProjectDetail',
  ProjectPhase: 'ProjectPhase',
  ProjectPhaseTask: 'ProjectPhaseTask',
  ConstructionPhase: 'ConstructionPhase',
  ConstructionTask: 'ConstructionTask',
  ProjectDocument: 'ProjectDocument',
  Budget: 'Budget',
  ExecutionCostEstimate: 'ExecutionCostEstimate'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
